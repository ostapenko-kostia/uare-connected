import { PrismaClient } from '@prisma/client'
import { NextRequest, NextResponse } from 'next/server'

const prisma = new PrismaClient()

export async function POST(request: NextRequest) {
	try {
		const { userId, interests } = await request.json()

		console.log(`üß™ Adding interests to user: ${userId}`, interests)

		// –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
		const user = await prisma.user.findUnique({
			where: { id: userId },
			include: { userInfo: true },
		})

		if (!user) {
			return NextResponse.json(
				{
					success: false,
					message: 'User not found',
				},
				{ status: 404 }
			)
		}

		// –Ø–∫—â–æ userInfo –Ω–µ —ñ—Å–Ω—É—î, —Å—Ç–≤–æ—Ä—é—î–º–æ –π–æ–≥–æ
		if (!user.userInfo) {
			await prisma.userInfo.create({
				data: {
					userId: user.id,
					interests: interests,
				},
			})
		} else {
			// –û–Ω–æ–≤–ª—é—î–º–æ —ñ—Å–Ω—É—é—á—ñ —ñ–Ω—Ç–µ—Ä–µ—Å–∏
			await prisma.userInfo.update({
				where: { userId: user.id },
				data: {
					interests: interests,
				},
			})
		}

		console.log(`‚úÖ Successfully updated interests for user: ${user.email}`)

		return NextResponse.json({
			success: true,
			message: `Updated interests for ${user.email}`,
			interests,
		})
	} catch (error) {
		console.error('‚ùå Error updating user interests:', error)

		return NextResponse.json(
			{
				success: false,
				error: error instanceof Error ? error.message : 'Unknown error',
			},
			{ status: 500 }
		)
	}
}

export async function GET() {
	try {
		// –ü–æ–∫–∞–∑—É—î–º–æ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ —ó—Ö —ñ–Ω—Ç–µ—Ä–µ—Å–∞–º–∏
		const users = await prisma.user.findMany({
			include: {
				userInfo: true,
			},
		})

		const userList = users.map(user => ({
			id: user.id,
			email: user.email,
			interests: user.userInfo?.interests || [],
			languages: user.userInfo?.languages || [],
			hasUserInfo: !!user.userInfo,
		}))

		return NextResponse.json({
			success: true,
			users: userList,
		})
	} catch (error) {
		console.error('‚ùå Error fetching users:', error)

		return NextResponse.json(
			{
				success: false,
				error: error instanceof Error ? error.message : 'Unknown error',
			},
			{ status: 500 }
		)
	}
}
