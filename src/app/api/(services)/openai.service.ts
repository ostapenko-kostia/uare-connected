import { openai } from '@/lib/openai'
import { Meet, User } from '@prisma/client'

class OpenAIService {
	async match(meet: Meet, users: User[]): Promise<string[]> {
		try {
			const prompt = `
–¢–∏ –µ–∫—Å–ø–µ—Ä—Ç –∑ —Å–µ–º–∞–Ω—Ç–∏—á–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É —Ç–∞ –ø—ñ–¥–±–æ—Ä—É –ª—é–¥–µ–π –¥–ª—è –∑—É—Å—Ç—Ä—ñ—á–µ–π. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –∑–Ω–∞–π—Ç–∏ –Ω–∞–π–±—ñ–ª—å—à —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º—ñ—Ç—É.

–ö–û–ù–¢–ï–ö–°–¢:
–ú—ñ—Ç: ${JSON.stringify(meet)}
–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ: ${JSON.stringify(users)}

–ö–†–ò–¢–ï–†–Ü–á –í–Ü–î–ë–û–†–£ (–≤ –ø–æ—Ä—è–¥–∫—É –≤–∞–∂–ª–∏–≤–æ—Å—Ç—ñ):

2. –¢–ï–ú–ê–¢–ò–ß–ù–ê –†–ï–õ–ï–í–ê–ù–¢–ù–Ü–°–¢–¨:
   - –ü–æ—Ä—ñ–≤–Ω—é–π —Ç–µ–≥–∏ –º—ñ—Ç—É (tags) –∑ —ñ–Ω—Ç–µ—Ä–µ—Å–∞–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (interests)
   - –®—É–∫–∞–π —Ç–æ—á–Ω—ñ –∑–±—ñ–≥–∏ —Ç–∞ —Å–µ–º–∞–Ω—Ç–∏—á–Ω–æ –±–ª–∏–∑—å–∫—ñ —Ç–µ–º–∏
   - –í—Ä–∞—Ö–æ–≤—É–π –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω—ñ –Ω–∞–≤–∏—á–∫–∏ (skills) –¥–ª—è —Ä–æ–±–æ—á–∏—Ö –º—ñ—Ç—ñ–≤
   - –ü–µ—Ä–µ–≤—ñ—Ä—è–π –ø–æ–ª—è: interests, skills, profession

3. –î–ï–ú–û–ì–†–ê–§–Ü–ß–ù–ê –°–£–ú–Ü–°–ù–Ü–°–¢–¨:
   - –í—ñ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ–≤–∏–Ω–µ–Ω –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ —Ü—ñ–ª—å–æ–≤—ñ–π –∞—É–¥–∏—Ç–æ—Ä—ñ—ó –º—ñ—Ç—É
   - –í—Ä–∞—Ö–æ–≤—É–π –ª–æ–∫–∞—Ü—ñ—é –¥–ª—è –æ—Ñ–ª–∞–π–Ω –∑—É—Å—Ç—Ä—ñ—á–µ–π
   - –ü–µ—Ä–µ–≤—ñ—Ä—è–π –ø–æ–ª—è: age, location, city

4. –î–û–°–í–Ü–î –¢–ê –†–Ü–í–ï–ù–¨:
   - –û—Ü—ñ–Ω—é–π –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å —Ä—ñ–≤–Ω—è –¥–æ—Å–≤—ñ–¥—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–µ–º—ñ –º—ñ—Ç—É
   - –í—Ä–∞—Ö–æ–≤—É–π –≤—ñ–∫ —è–∫—â–æ –≤–∫–∞–∑–∞–Ω–∏–π
   - –ü–µ—Ä–µ–≤—ñ—Ä—è–π –ø–æ–ª—è: age

–ü–†–ê–í–ò–õ–ê –û–¶–Ü–ù–ö–ò:
- –ë—É–¥—å —Å—É–≤–æ—Ä–∏–º: –∫—Ä–∞—â–µ –º–µ–Ω—à–µ, –∞–ª–µ —è–∫—ñ—Å–Ω—ñ—à–∏—Ö –∑–±—ñ–≥—ñ–≤
- –ù–µ —Å—Ç–≤–æ—Ä—é–π —à—Ç—É—á–Ω—ñ –∑–≤'—è–∑–∫–∏ –º—ñ–∂ –Ω–µ–ø–æ–≤'—è–∑–∞–Ω–∏–º–∏ —Ç–µ–º–∞–º–∏
- –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–æ–≤–∏–Ω–µ–Ω –º–∞—Ç–∏ —Ä–µ–∞–ª—å–Ω—É –∑–∞—Ü—ñ–∫–∞–≤–ª–µ–Ω—ñ—Å—Ç—å —É —Ç–µ–º—ñ –º—ñ—Ç—É
- –Ü–≥–Ω–æ—Ä—É–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –Ω–∏–∑—å–∫–æ—é —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ñ—Å—Ç—é (–º–µ–Ω—à–µ 70% –∑–±—ñ–≥—É)
- –í—Ä–∞—Ö–æ–≤—É–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –º—ñ—Ç—É (—Ñ–æ—Ä–º–∞–ª—å–Ω–∏–π/–Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–∏–π, –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π/—Ö–æ–±–±—ñ)

–§–û–†–ú–ê–¢ –í–Ü–î–ü–û–í–Ü–î–Ü:
–ü–æ–≤–µ—Ä–Ω–∏ JSON –æ–±'—î–∫—Ç –∑ –º–∞—Å–∏–≤–æ–º ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —É –ø–æ–ª—ñ "matches".
–°–æ—Ä—Ç—É–π –∑–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ñ—Å—Ç—é (–Ω–∞–π–∫—Ä–∞—â—ñ –∑–±—ñ–≥–∏ –ø–µ—Ä—à–∏–º–∏).
–ü—Ä–∏–∫–ª–∞–¥: {"matches": ["user1", "user2", "user3"]}
`

			const completion = await openai.chat.completions.create({
				model: 'gpt-4o',
				messages: [
					{
						role: 'user',
						content: prompt,
					},
				],
				temperature: 0.3,
				response_format: {
					type: 'json_schema',
					json_schema: {
						name: 'user_matches',
						strict: true,
						schema: {
							type: 'object',
							properties: {
								matches: {
									type: 'array',
									items: {
										type: 'string',
									},
								},
							},
							required: ['matches'],
							additionalProperties: false,
						},
					},
				},
			})

			const responseText = completion.choices[0]?.message?.content
			if (!responseText) {
				console.log('ü§ñ No response text from OpenAI')
				return []
			}

			const response = JSON.parse(responseText)
			const matches = response.matches || []

			console.log('ü§ñ Matches:', matches)

			return matches
		} catch (error) {
			console.error('ü§ñ Error with OpenAI semantic comparison:', error)
			return []
		}
	}
}

export const openaiService = new OpenAIService()
