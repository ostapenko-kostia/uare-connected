// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(cuid())

  firstName String
  lastName  String
  email     String @unique
  password  String

  avatarUrl String
  balance   Int    @default(0)

  refreshToken RefreshToken?
  userInfo     UserInfo?

  joinRequests JoinRequest[]
  createdMeets Meet[]
  matches      Match[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model UserInfo {
  id String @id @default(cuid())

  user   User   @relation(references: [id], fields: [userId], onDelete: Cascade)
  userId String @unique

  age       Int      @default(0)
  gender    GENDER   @default(MALE)
  interests String[] @default([])
  languages String[] @default(["en"])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model RefreshToken {
  id String @id @default(cuid())

  user   User   @relation(references: [id], fields: [userId], onDelete: Cascade)
  userId String @unique

  token String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Meet {
  id String @id @default(cuid())

  creator   User   @relation(references: [id], fields: [creatorId])
  creatorId String

  joinRequest JoinRequest[]
  matches     Match[]

  date     DateTime
  url      String
  title    String
  tags     String[]
  language String

  maxMembers Int @default(5)

  zoomMeetingId String?
  zoomPassword  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model JoinRequest {
  id String @id @default(cuid())

  user   User   @relation(references: [id], fields: [userId])
  userId String

  meet   Meet   @relation(references: [id], fields: [meetId])
  meetId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Match {
  id String @id @default(cuid())

  user   User   @relation(references: [id], fields: [userId])
  userId String

  meet   Meet   @relation(references: [id], fields: [meetId])
  meetId String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

enum GENDER {
  MALE
  FEMALE
}
